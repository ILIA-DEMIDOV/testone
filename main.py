from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = '7915298434:AAGif53T03tKt3nfvpHlCDBrTs-EkK_-p4U'

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
details_rus = (
    '<b>–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ:</b>\n\n'
    '<b>–¢–µ—Å—Ç—ã/–ë–∏–ª–µ—Ç—ã</b> - –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã DMV –∏ –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –Ω–∞ –±–∏–ª–µ—Ç–∞—Ö, '
    '—á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –Ω–∞—Å—Ç–æ—è—â–µ–º—É —ç–∫–∑–∞–º–µ–Ω—É.\n\n'
    '<b>–ó–Ω–∞–∫–∏</b> - –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∏—Ç—å –¥–æ—Ä–æ–∂–Ω—ã–µ –∑–Ω–∞–∫–∏, '
    '–≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–Ω–∞–∫–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É—Ç –≤ –≤–∞—à–µ–º —ç–∫–∑–∞–º–µ–Ω–µ.\n\n'
    '<b>–ü–î–î</b> - –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è, '
    '–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞–º.\n\n'
    '<b>–≠–∫–∑–∞–º–µ–Ω</b> - –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 40 –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ 45 –º–∏–Ω—É—Ç, '
    '—á—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç DMV.'
)
details_eng = (
    '<b>Here you will find:</b>\n\n'
    '<b>Tests/Tickets</b> - Here you can take DMV tests and practice on tickets to prepare for the real exam.\n\n'
    '<b>Signs</b> - In this section, you can study traffic signs, as questions about signs will definitely be on your exam.\n\n'
    '<b>Traffic Rules</b> - Here you will find a complete guide to traffic rules, organized by sections and subsections.\n\n'
    '<b>Exam</b> - In this section, you will need to answer 40 questions in 45 minutes, simulating the real DMV test.'
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
language_button_eng = InlineKeyboardButton(text='English üá∫üá∏Ô∏è', callback_data='lang_eng')
language_button_rus = InlineKeyboardButton(text='Russian üá∑üá∫Ô∏è', callback_data='lang_rus')

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
language_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[language_button_eng], [language_button_rus]])

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —à—Ç–∞—Ç–∞
state_buttons = [
    InlineKeyboardButton(text='California ‚òÄÔ∏è', callback_data='state_california'),
    InlineKeyboardButton(text='Washington üå≤', callback_data='state_washington'),
    InlineKeyboardButton(text='Florida üå¥', callback_data='state_florida'),
    InlineKeyboardButton(text='Chicago üåÜ', callback_data='state_chicago')
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —à—Ç–∞—Ç–∞
state_keyboard = InlineKeyboardMarkup(inline_keyboard=[[button] for button in state_buttons])

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —à—Ç–∞—Ç–∞
service_buttons = [
    InlineKeyboardButton(text='–¢–µ—Å—Ç—ã / –±–∏–ª–µ—Ç—ã', callback_data='test_1'),
    InlineKeyboardButton(text='–ü–î–î', callback_data='test_2'),
    InlineKeyboardButton(text='–ó–Ω–∞–∫–∏', callback_data='test_3'),
    InlineKeyboardButton(text='–≠–∫–∑–∞–º–µ–Ω', callback_data='test_4')
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
service_keyboard = InlineKeyboardMarkup(inline_keyboard=[[button] for button in service_buttons])

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
test_type_buttons = [
    InlineKeyboardButton(text='üöó –ê–≤—Ç–æ', callback_data='test_auto'),
    InlineKeyboardButton(text='üèçÔ∏è –ú–æ—Ç–æ', callback_data='test_moto'),
    InlineKeyboardButton(text='üöö CDL', callback_data='test_cdl')
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
test_type_keyboard = InlineKeyboardMarkup(inline_keyboard=[[button] for button in test_type_buttons])

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
lang_ = "Russian"

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(text='.            Choose language:          .', reply_markup=language_keyboard)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.callback_query(lambda callback: callback.data.startswith('lang_'))
async def handle_language_selection(callback: types.CallbackQuery):
    global lang_
    lang_ = "English" if callback.data == 'lang_eng' else "Russian"
    await callback.answer()
    await callback.message.edit_text(text='.            Choose state üá∫üá∏Ô∏è:          .', reply_markup=state_keyboard)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —à—Ç–∞—Ç–∞
@dp.callback_query(lambda callback: callback.data.startswith('state_'))
async def handle_state_selection(callback: types.CallbackQuery):
    await callback.answer()
    state_name = callback.data.split('_')[1].capitalize()  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —à—Ç–∞—Ç–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —à—Ç–∞—Ç
    if state_name == 'California':
        if lang_ == "Russian":
            await callback.message.edit_text(
                text=f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —à—Ç–∞—Ç California!</b> {details_rus}',
                reply_markup=service_keyboard,
                parse_mode='HTML'
            )
        else:
            await callback.message.edit_text(
                text=f'<b>You have chosen the state of California!</b> {details_eng}',
                reply_markup=service_keyboard,
                parse_mode='HTML'
            )
    elif state_name == 'Washington':
        if lang_ == "Russian":
            await callback.message.edit_text(
                text=f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —à—Ç–∞—Ç Washington!</b> {details_rus}',
                reply_markup=service_keyboard,
                parse_mode='HTML'
            )
        else:
            await callback.message.edit_text(
                text=f'<b>You have chosen the state of Washington!</b> {details_eng}',
                reply_markup=service_keyboard,
                parse_mode='HTML'
            )
    elif state_name == 'Florida':
        if lang_ == "Russian":
            await callback.message.edit_text(
                text=f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —à—Ç–∞—Ç Florida!</b> {details_rus}',
                reply_markup=service_keyboard,
                parse_mode='HTML'
            )
        else:
            await callback.message.edit_text(
                text=f'<b>You have chosen the state of Florida!</b> {details_eng}',
                reply_markup=service_keyboard,
                parse_mode='HTML'
            )
    elif state_name == 'Chicago':
        if lang_ == "Russian":
            await callback.message.edit_text(
                text=f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥ Chicago!</b> {details_rus}',
                reply_markup=service_keyboard,
                parse_mode='HTML'
            )
        else:
            await callback.message.edit_text(
                text=f'<b>You have chosen the city of Chicago!</b> {details_eng}',
                reply_markup=service_keyboard,
                parse_mode='HTML'
            )

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
@dp.callback_query(lambda callback: callback.data.startswith('test_'))
async def handle_service_selection(callback: types.CallbackQuery):
    await callback.answer()
    service_name = callback.data.split('_')[1].capitalize()  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞

    if service_name == '1':  # –¢–µ—Å—Ç—ã / –±–∏–ª–µ—Ç—ã
        await callback.message.edit_text(
            text='<b>–¢–µ—Å—Ç—ã/–ë–∏–ª–µ—Ç—ã</b> - –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã DMV –∏ –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –Ω–∞ –±–∏–ª–µ—Ç–∞—Ö, —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –Ω–∞—Å—Ç–æ—è—â–µ–º—É —ç–∫–∑–∞–º–µ–Ω—É.',
            reply_markup=test_type_keyboard,
            parse_mode='HTML'
        )
    else:
        await callback.message.edit_text(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–æ–º–µ—Ä {service_name}.', reply_markup=None)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    dp.run_polling(bot)
